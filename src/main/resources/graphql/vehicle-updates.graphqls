
scalar DateTime
scalar String
scalar Boolean
scalar Int
scalar Float
scalar Duration

schema {
    query: Query
    subscription : Subscription
}

type Query {

    vehicles(serviceJourneyId: String
        # Date as in "Operating date" when realtime-updates are referenced by ServiceJourneyId + Date
        date: String
        serviceJourneyIdAndDates: [ServiceJourneyIdAndDate]
        datedServiceJourneyId: String
        datedServiceJourneyIds: [String]
        operatorRef: String
        codespaceId: String
        mode: VehicleModeEnumeration
        vehicleId: String
        vehicleIds: [String]
        lineRef: String
        lineName: String
        monitored: Boolean
        boundingBox: BoundingBox
        # Maximum age of data in the response as Duration (e.g. `PT1M`). If lastUpdated is older than this, it will not be included in the response.
        maxDataAge: Duration,) : [VehicleUpdate]

    lines(codespaceId: String) : [Line]

    codespaces : [Codespace]

    serviceJourney(id: String!) : ServiceJourney

    serviceJourneys(lineRef: String, codespaceId: String) : [ServiceJourney]

    operators(codespaceId: String!) : [Operator]
}

type Subscription {

    vehicles(serviceJourneyId: String
                   # Date as in "Operating date" when realtime-updates are referenced by ServiceJourneyId + Date
                   date: String
                   serviceJourneyIdAndDates: [ServiceJourneyIdAndDate]
                   datedServiceJourneyId: String
                   datedServiceJourneyIds: [String]
                   operatorRef: String
                   codespaceId: String
                   mode: VehicleModeEnumeration
                   vehicleId: String
                   vehicleIds: [String]
                   lineRef: String
                   lineName: String
                   monitored: Boolean
                   boundingBox: BoundingBox,
                   # Maximum age of data in the response as Duration (e.g. `PT1M`). If lastUpdated is older than this, it will not be included in the initial response.
                   maxDataAge: Duration,
                   # Number of updates buffered before data is pushed. May be used in combination with bufferTime.
                   bufferSize: Int = 20
                   # How long - in milliseconds - data is buffered before data is pushed. May be used in combination with bufferSize.
                   bufferTime: Int = 250
                   ) : [VehicleUpdate]
}

type VehicleUpdate {
    direction: String
    serviceJourney: ServiceJourney
    datedServiceJourney: DatedServiceJourney
    operator: Operator
    codespace: Codespace
    originRef: String
    originName: String
    destinationRef: String
    destinationName: String
    mode: VehicleModeEnumeration
    vehicleId: String
    vehicleRef: String @deprecated(reason: "Use 'vehicleId'.")
    occupancy: OccupancyEnumeration @deprecated(reason: "Use 'occupancyStatus'.")
    occupancyStatus: OccupancyStatus
    line: Line
    lastUpdated: DateTime
    lastUpdatedEpochSecond: Float
    expiration: DateTime
    expirationEpochSecond: Float
    location: Location
    speed: Float
    heading: Float @deprecated(reason: "Use 'bearing''.")
    bearing: Float

    monitored: Boolean

    # The current delay in seconds - negative delay means ahead of schedule
    delay: Float

    # Whether the vehicle is affected by traffic jams or other circumstances which may lead to further delays. If `null`, current status is unknown.
    inCongestion: Boolean

    # Reported status of the vehicle
    vehicleStatus: VehicleStatusEnumeration

    progressBetweenStops: ProgressBetweenStops
    monitoredCall: MonitoredCall
}

type Location {
    latitude: Float!
    longitude: Float!
}

type Line {
    lineRef: String
    lineName: String
    publicCode: String
}

type Codespace {
    codespaceId: String!
}

type ServiceJourney {
    # ID that defines this journey
    id: String!
    # Date as provided when realtime-updates are referenced by ServiceJourneyId + Date
    date: String
    serviceJourneyId: String! @deprecated(reason: "Use 'id' instead.")
    pointsOnLink: PointsOnLink  @deprecated(reason: "Experimental - should not be used with subscription")
}

type DatedServiceJourney {
    # ID that defines this journey
    id: String!
    serviceJourney: ServiceJourney
}

type PointsOnLink {
    length: Float
    points: String
}

type Operator {
    operatorRef: String!
    name: String
}

type ProgressBetweenStops {
    linkDistance: Float
    percentage: Float
}

type MonitoredCall {
    stopPointRef: String
    order: Int
    vehicleAtStop: Boolean
}

input ServiceJourneyIdAndDate {
    # ServiceJourneyId as referenced in planned data
    id: String!
    # Date as in "Operating date" when realtime-updates are referenced by ServiceJourneyId + Date.
    date: String
}

input BoundingBox {
    minLat: Float!
    minLon: Float!
    maxLat: Float!
    maxLon: Float!
}

enum VehicleModeEnumeration {
    AIR
    BUS
    COACH
    FERRY
    METRO
    TAXI
    TRAM
    RAIL
}

enum OccupancyEnumeration {
    UNKNOWN
    MANY_SEATS_AVAILABLE
    SEATS_AVAILABLE
    FEW_SEATS_AVAILABLE
    STANDING_AVAILABLE
    FULL
    NOT_ACCEPTING_PASSENGERS
}

enum OccupancyStatus {
  """
  The vehicle or carriage can currently accommodate only standing passengers and has limited
  space for them. There isn't a big difference between this and `full` so it's possible to
  handle them as the same value, if one wants to limit the number of different values.
  SIRI nordic profile: merge into `standingRoomOnly`.
  """
  crushedStandingRoomOnly
  """
  The vehicle is considered empty by most measures, and has few or no passengers onboard, but is
  still accepting passengers. There isn't a big difference between this and `manySeatsAvailable`
  so it's possible to handle them as the same value, if one wants to limit the number of different
  values.
  SIRI nordic profile: merge these into `manySeatsAvailable`.
  """
  empty
  """
  The vehicle or carriage has a few seats available.
  SIRI nordic profile: less than ~50% of seats available.
  """
  fewSeatsAvailable
  """
  The vehicle or carriage is considered full by most measures, but may still be allowing
  passengers to board.
  """
  full
  """
  The vehicle or carriage has a large number of seats available.
  SIRI nordic profile: more than ~50% of seats available.
  """
  manySeatsAvailable
  "The vehicle or carriage doesn't have any occupancy data available."
  noData
  """
  The vehicle or carriage has no seats or standing room available.
  SIRI nordic profile: if vehicle/carriage is not in use / unavailable, or passengers are only
  allowed to alight due to e.g. crowding.
  """
  notAcceptingPassengers
  """
  The vehicle or carriage only has standing room available.
  SIRI nordic profile: less than ~10% of seats available.
  """
  standingRoomOnly
}

enum VehicleStatusEnumeration {
    ASSIGNED
    AT_ORIGIN
    CANCELLED
    COMPLETED
    IN_PROGRESS
    OFF_ROUTE
}